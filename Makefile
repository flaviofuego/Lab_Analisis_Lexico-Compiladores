# Makefile para el Analizador L√©xico
# Este archivo automatiza el proceso de compilaci√≥n

# Variables de configuraci√≥n
LEX_SOURCE = analizador_lexico.l
LEX_BASIC = analizador_basico.l
C_SOURCE = lex.yy.c
EXECUTABLE = analizador_lexico
EXECUTABLE_BASIC = analizador_basico
INPUT_FILE = entrada_ejemplo.py

# Compilador y flags
CC = gcc
CFLAGS = -Wall -Wextra -std=c99
FLEX_FLAGS = 

# Regla principal: construir todo
all: $(EXECUTABLE)

# Construir solo el analizador b√°sico
basic: $(EXECUTABLE_BASIC)

# Construir ambos analizadores
both: $(EXECUTABLE) $(EXECUTABLE_BASIC)

# Paso 1: Generar c√≥digo C desde el archivo Lex
$(C_SOURCE): $(LEX_SOURCE)
	@echo "üîß Generando c√≥digo C desde Lex..."
	flex $(FLEX_FLAGS) $(LEX_SOURCE)
	@echo "‚úÖ C√≥digo C generado: $(C_SOURCE)"

# Paso 2: Compilar el c√≥digo C generado
$(EXECUTABLE): $(C_SOURCE)
	@echo "üîß Compilando analizador l√©xico..."
	$(CC) $(CFLAGS) $(C_SOURCE) -o $(EXECUTABLE) -lfl
	@echo "‚úÖ Analizador l√©xico compilado: $(EXECUTABLE)"

# Compilar analizador b√°sico
$(EXECUTABLE_BASIC): $(LEX_BASIC)
	@echo "üîß Generando analizador b√°sico..."
	flex -o lex_basic.yy.c $(LEX_BASIC)
	@echo "üîß Compilando analizador b√°sico..."
	$(CC) $(CFLAGS) lex_basic.yy.c -o $(EXECUTABLE_BASIC) -lfl
	@echo "‚úÖ Analizador b√°sico compilado: $(EXECUTABLE_BASIC)"
	

	

# Ejecutar el analizador con el archivo de ejemplo
run: $(EXECUTABLE)
	@echo "üöÄ Ejecutando analizador l√©xico con archivo de ejemplo..."
	@echo "================================================"
	./$(EXECUTABLE) $(INPUT_FILE)
	@echo "================================================"

# Ejecutar analizador b√°sico
run-basic: $(EXECUTABLE_BASIC)
	@echo "üöÄ Ejecutando analizador B√ÅSICO con archivo de ejemplo..."
	@echo "================================================"
	./$(EXECUTABLE_BASIC) $(INPUT_FILE)
	@echo "================================================"

# Ejecutar con entrada personalizada
run-custom: $(EXECUTABLE)
	@echo "üìù Ejecutando analizador l√©xico (entrada desde teclado)..."
	@echo "Escribe tu c√≥digo Python y presiona Ctrl+D cuando termines:"
	@echo "================================================"
	./$(EXECUTABLE)

# Ejecutar analizador b√°sico con archivo personalizado
run-basic-file: $(EXECUTABLE_BASIC)
	@if [ -z "$(FILE)" ]; then \
		echo "‚ùå Error: Especifica un archivo con: make run-basic-file FILE=archivo.py"; \
		exit 1; \
	fi
	@if [ ! -f "$(FILE)" ]; then \
		echo "‚ùå Error: El archivo $(FILE) no existe"; \
		exit 1; \
	fi
	@echo "üöÄ Ejecutando analizador B√ÅSICO con archivo: $(FILE)"
	@echo "================================================"
	./$(EXECUTABLE_BASIC) $(FILE)
	@echo "================================================"

# Limpiar archivos generados
clean:
	@echo "üßπ Limpiando archivos generados..."
	rm -f $(C_SOURCE) $(EXECUTABLE) lex_basic.yy.c $(EXECUTABLE_BASIC)
	@echo "‚úÖ Limpieza completada"

# Mostrar ayuda
help:
	@echo "=== Analizador L√©xico - Ayuda ==="
	@echo ""
	@echo "Comandos disponibles:"
	@echo "  make all          - Compilar el analizador l√©xico completo"
	@echo "  make basic        - Compilar solo el analizador b√°sico (16 palabras)"
	@echo "  make both         - Compilar ambos analizadores"
	@echo "  make run          - Ejecutar analizador completo con archivo de ejemplo"
	@echo "  make run-basic    - Ejecutar analizador b√°sico con archivo de ejemplo"
	@echo "  make run-custom   - Ejecutar con entrada desde teclado"
	@echo "  make run-file FILE=archivo.py - Ejecutar analizador completo con archivo espec√≠fico"
	@echo "  make run-basic-file FILE=archivo.py - Ejecutar analizador b√°sico con archivo espec√≠fico"
	@echo "  make clean        - Limpiar archivos generados"
	@echo "  make check-deps   - Verificar dependencias"
	@echo "  make stats        - Mostrar estad√≠sticas del proyecto"
	@echo "  make install      - Instalaci√≥n completa desde cero"
	@echo "  make help         - Mostrar esta ayuda"
	@echo ""
	@echo "Archivos importantes:"
	@echo "  $(LEX_SOURCE)   - C√≥digo fuente Lex COMPLETO (32 palabras reservadas)"
	@echo "  $(LEX_BASIC)    - C√≥digo fuente Lex B√ÅSICO (16 palabras reservadas)"
	@echo "  $(INPUT_FILE)   - Archivo de ejemplo"
	@echo "  $(EXECUTABLE)   - Ejecutable completo"
	@echo "  $(EXECUTABLE_BASIC) - Ejecutable b√°sico"
	@echo ""
	@echo "Ejemplos de uso:"
	@echo "  make basic && make run-basic                    # Usar analizador b√°sico"
	@echo "  make all && make run                            # Usar analizador completo"
	@echo "  make run-basic-file FILE=mi_codigo.py           # Analizar archivo con versi√≥n b√°sica"

# Verificar que Flex est√° instalado
check-deps:
	@echo "üîç Verificando dependencias..."
	@which flex > /dev/null || (echo "‚ùå Error: Flex no est√° instalado" && exit 1)
	@which gcc > /dev/null || (echo "‚ùå Error: GCC no est√° instalado" && exit 1)
	@echo "‚úÖ Todas las dependencias est√°n disponibles"

# Ejecutar con archivo personalizado
run-file: $(EXECUTABLE)
	@if [ -z "$(FILE)" ]; then \
		echo "‚ùå Error: Especifica un archivo con: make run-file FILE=archivo.py"; \
		exit 1; \
	fi
	@if [ ! -f "$(FILE)" ]; then \
		echo "‚ùå Error: El archivo $(FILE) no existe"; \
		exit 1; \
	fi
	@echo "üöÄ Ejecutando analizador l√©xico con archivo: $(FILE)"
	@echo "================================================"
	./$(EXECUTABLE) $(FILE)
	@echo "================================================"

# Mostrar estad√≠sticas del proyecto
stats:
	@echo "üìä Estad√≠sticas del proyecto:"
	@echo "  L√≠neas en $(LEX_SOURCE): $$(wc -l < $(LEX_SOURCE))"
	@echo "  L√≠neas en $(LEX_BASIC): $$(wc -l < $(LEX_BASIC))"
	@echo "  Tama√±o de $(LEX_SOURCE): $$(du -h $(LEX_SOURCE) | cut -f1)"
	@echo "  Tama√±o de $(LEX_BASIC): $$(du -h $(LEX_BASIC) | cut -f1)"
	@if [ -f "$(EXECUTABLE)" ]; then \
		echo "  Tama√±o del ejecutable completo: $$(du -h $(EXECUTABLE) | cut -f1)"; \
	else \
		echo "  Ejecutable completo: No compilado"; \
	fi
	@if [ -f "$(EXECUTABLE_BASIC)" ]; then \
		echo "  Tama√±o del ejecutable b√°sico: $$(du -h $(EXECUTABLE_BASIC) | cut -f1)"; \
	else \
		echo "  Ejecutable b√°sico: No compilado"; \
	fi

# Instalaci√≥n completa desde cero
install: check-deps clean all
	@echo "‚úÖ Instalaci√≥n completada exitosamente"

# Instalaci√≥n b√°sica
install-basic: check-deps clean basic
	@echo "‚úÖ Instalaci√≥n B√ÅSICA completada exitosamente"
	@echo "================================================"
	@echo "================================================"


# Reglas que no corresponden a archivos
.PHONY: all basic both run run-basic run-custom run-file run-basic-file clean help check-deps stats install install-basic